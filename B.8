//强连通分量判断
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 1000

typedef struct Node{
    int vertex;
    struct Node* next;
}Node;

typedef struct Graph{
    int numVertices;
    int* visited;
    struct Node** adjLists;
}GH;

Node *createNode(int v)
{
    Node* newNode = (Node *)malloc(sizeof(Node));
    newNode -> vertex = v;
    newNode -> next = NULL;
    return newNode;
}

GH *createGraph(int vertices)
{
    GH *graph = (GH *)malloc(sizeof(GH));
    graph -> numVertices = vertices;
    graph -> adjLists = (Node **)malloc(vertices * sizeof(Node *));
    graph -> visited = (int *)malloc(vertices * sizeof(int));
    for (int i = 0; i < vertices; i ++)
    {
        graph -> adjLists[i] = NULL;
        graph -> visited[i] = 0;
    }
    return graph;
}

void addEdge(GH *graph, int src, int dest)
{
    Node *newNode = createNode(dest);
    newNode -> next = graph -> adjLists[src];
    graph -> adjLists[src] = newNode;
}

void DFS(GH *graph, int vertex)
{
    graph -> visited[vertex] = 1;
    Node *temp = graph -> adjLists[vertex];
    while (temp != NULL)
    {
        int adjVertex = temp -> vertex;
        if(!graph -> visited[adjVertex])
            DFS(graph, adjVertex);
        temp = temp -> next;
    }
}

GH *getTranspose(GH *graph)
{
    GH *transposedGraph = createGraph(graph -> numVertices);
    for (int v = 0; v < graph -> numVertices; v ++)
    {
        Node *temp = graph -> adjLists[v];
        while(temp != NULL)
        {
            addEdge(transposedGraph, temp -> vertex, v);
            temp = temp -> next;
        }
    }
    return transposedGraph;
}

int isStronglyConnected(GH *graph)
{
    DFS(graph, 0);
    int i;
    for(i = 0; i < graph -> numVertices; i ++)
        if(!graph -> visited[i])
            return 0;
    for(i = 0; i < graph -> numVertices; i ++)
        graph -> visited[i] = 0;
    GH *transposedGraph = getTranspose(graph);
    DFS(transposedGraph, 0);
    for (i = 0; i < transposedGraph->numVertices; i ++)
        if (!transposedGraph -> visited[i])
            return 0;
    return 1;
}

int main(void)
{
    GH *graph = createGraph(5);
    int n = 8;
    for (int i = 0; i < n; i++)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        addEdge(graph, x, y);
    }
    if(isStronglyConnected(graph))
        printf("Yes\n");
    else
        printf("No\n");
    return 0;
}
