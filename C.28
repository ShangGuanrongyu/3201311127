//判断二叉树类型
#include <stdio.h>

typedef struct TreeNode{
    int num;
    struct TreeNode *left;
    struct TreeNode *right;
}SS;

int isFullBinaryTree(SS* root)
{
    if(root == NULL)
        return 1;
    if(root -> left == NULL && root -> right == NULL)
        return 1;
    if(root -> left != NULL && root -> right != NULL)
        return isFullBinaryTree(root -> left) && isFullBinaryTree(root -> right);
    return 0;
}

int isCompleteBinaryTree(SS* root)
{
    int front = 0, rear = 0;
    SS *queue[100], *cur;
    queue[rear ++] = root;
    while (front < rear)
	{
        cur = queue[front ++];
        if (cur == NULL)
		{
            while (front < rear && queue[front] == NULL)
                front ++;
            if (front < rear)
                return 0;
        }
		else
		{
            queue[rear ++] = cur -> left;
            queue[rear ++] = cur -> right;
        }
    }
    return 1;
}

int main(void)
{
	int isFull1, isFull2, isComplete1, isComplete2;
    // 构建满二叉树
    SS root1 = {1, NULL, NULL};
    SS left1 = {2, NULL, NULL};
    SS right1 = {3, NULL, NULL};
    SS left_left1 = {4, NULL, NULL};
    SS left_right1 = {5, NULL, NULL};
    SS right_left1 = {6, NULL, NULL};
    SS right_right1 = {7, NULL, NULL};
    root1.left = &left1;
    root1.right = &right1;
    left1.left = &left_left1;
    left1.right = &left_right1;
    right1.left = &right_left1;
    right1.right = &right_right1;

    isFull1 = isFullBinaryTree(&root1);
    isComplete1 = isCompleteBinaryTree(&root1);

    // 构建完全二叉树
    SS root2 = {1, NULL, NULL};
    SS left2 = {2, NULL, NULL};
    SS right2 = {3, NULL, NULL};
    SS left_left2 = {4, NULL, NULL};
    SS right_right2 = {7, NULL, NULL};
    root2.left = &left2;
    root2.right = &right2;
    left2.left = &left_left2;
    right2.right = &right_right2;

    isFull2 = isFullBinaryTree(&root2);
    isComplete2 = isCompleteBinaryTree(&root2);

    printf("root1: %s满二叉树，%s完全二叉树\n", isFull1 ? "" : "不是", isComplete1 ? "" : "不是");
    printf("root2: %s满二叉树，%s完全二叉树\n", isFull2 ? "" : "不是", isComplete2 ? "" : "不是");
    return 0;
}
