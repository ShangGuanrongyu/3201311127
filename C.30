//二叉排序树查找路径
#include <stdio.h>
#include <stdlib.h>
#define LEN sizeof(SS)

typedef struct Node{
    int k;
    struct Node* left;
    struct Node* right;
}SS;

SS *Create(int k)
{
    SS* node = (SS *)malloc(LEN);
    if(node == NULL)
	{
        printf("内存分配失败！\n");
        exit(1);
    }
    node -> k = k;
    node -> left = NULL;
    node -> right = NULL;
    return node;
}

SS *Insert(Node* root, int k)
{
    if(root == NULL)
        return Create(k);
    if(k < root -> k)
        root -> left = Insert(root -> left, k);
    else if(k > root -> k)
        root -> right = Insert(root -> right, k);
    return root;
}

int Search(Node* root, int k)
{
    if(root == NULL)
        return 0;
    if(k == root -> k)
        return 1;
    if(k < root -> k)
	{
        printf("%d -> ", root -> k);
        return Search(root -> left, k);
    }
	else
	{
        printf("%d -> ", root -> k);
        return Search(root -> right, k);
    }
}

void print(SS* root, int k)
{
    if(Search(root, k))
        printf("%d\n", k);
    else
        printf("\nERROR! 未找到关键字 %d\n", k);
}

void Free(Node* root)
{
    if (root == NULL)
        return;
    Free(root -> left);
    Free(root -> right);
    free(root);
}

int main(void)
{
	int k;
    SS* root = NULL;
    root = Insert(root, 6);
    Insert(root, 2);
    Insert(root, 8);
    Insert(root, 1);
    Insert(root, 4);
    Insert(root, 3);
    Insert(root, 5);
    Insert(root, 7);
    Insert(root, 9);
	scanf("%d", &k);
    printf("查找关键字 %d 的路径：\n", k);
    print(root, k);
    Free(root);
    return 0;
}
